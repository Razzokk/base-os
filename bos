#!/usr/bin/env bash

base_dir="$PWD"
target_dir="/opt"
target=x86_64

### Command declaration ###

declare -A commands
declare -A commands_help

add_command()
{
	commands["$1"]="$2"
	commands_help["$1"]="$3"
}

add_command "help" print_help "Print this help information"
add_command "setup" setup "Setup the compilers and bin-tools required to build the OS"
add_command "make" make "Run make targets"
add_command "qemu" qemu "Start the OS in the qemu emulator"
add_command "qemu-dbg" qemu-dbg "Start the OS in the qemu emulator debugging"
add_command "gdb" gdb "Start the gdb debugger connecting to the qemu instance"

### Command declaration end ###

print_help()
{
	printf "Usage: ./bos \x1b[95m<command>\x1b[m [args...]\n"
	printf "On Windows: .\\\bos[.ps1] \x1b[95m<command>\x1b[m [args...]\n\n"
	printf "=== \x1b[93mAvailable commands\x1b[m ===\n"
	for command in "${!commands_help[@]}"
	do
		printf "\x1b[95m%-10s\x1b[m - %s\n" "$command" "${commands_help[$command]}"
	done
}

setup()
{
	printf "Grab something to eat and drink, this step can take quiet a while...\n"
	./scripts/install_dependencies.sh $base_dir
}

qemu()
{
	qemu-system-$target -cdrom ./build/base_os.iso -debugcon stdio -serial file:serial.log "$@"
}

qemu-dbg()
{
	qemu -s -S "$@"
}

command=$1

if [[ -z "$command" ]]
then
	print_help
elif [[ -n ${commands["$command"]} ]]
then
	${commands["$1"]} "${@:2}"
else
	printf "\x1b[91mERROR\x1b[m: command \x1b[95m%s\x1b[m unknown...\n" "$command"
	printf "Use \x1b[95m%s\x1b[m to see a list of available commands\n" "help"
fi
